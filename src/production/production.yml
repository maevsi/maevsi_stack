secrets:
  postgres-backup_db:
  # The database's name.
    external: true
  traefik_cf-dns-api-token:
  # The DNS provider's DNS API token.
    external: true
  traefik_cf-zone-api-token:
  # The DNS provider's zone API token.
    external: true
services:
  adminer:
    deploy:
      labels:
      - (( append ))
      - traefik.http.routers.adminer_secure.middlewares=auth
      - traefik.http.routers.adminer_secure.tls.certresolver=default
  jobber:
  # You cannot access the jobber via a web interface.
    environment:
      AWS_SHARED_CREDENTIALS_FILE: /run/secrets/jobber_aws-credentials
    image: dargmuesli/jobber-aws-msmtp:1.2.5
    secrets:
    - source: jobber_aliases
      target: /etc/aliases
    - jobber_aws-credentials
    - source: jobber_msmtprc
      target: /etc/msmtprc
    volumes:
      - ./backups/postgres/:/backups/
      - ./configurations/jobber/.jobber:/home/jobberuser/.jobber:ro
      - ./configurations/jobber/aws-config:/home/jobberuser/.aws/config:ro
  maevsi:
    deploy:
      labels:
      - (( append ))
      - traefik.http.routers.maevsi_secure.tls.certresolver=default
    image: maevsi/maevsi:1.0.1@sha256:8e20c49b611dc8f858af7b80162932115ef1a068b811fad39d645acbaea4e973
    user: (( prune ))
    volumes: (( prune ))
  maevsi_beta:
  # You can access the main project's beta version at [beta.maevsi.test](https://maevsi.test/).
    configs:
      - source: postgraphile_public-key
        target: /run/config/postgraphile_jwt-public-key
    deploy:
      labels:
      - traefik.enable=true
      - traefik.http.middlewares.maevsi_beta_cors.headers.accessControlAllowHeaders=authorization,hook-name
      - traefik.http.middlewares.maevsi_beta_cors.headers.accessControlAllowMethods=GET,POST,PUT,DELETE
      - traefik.http.middlewares.maevsi_beta_cors.headers.accessControlAllowOriginList=http://localhost:3000
      - traefik.http.routers.maevsi_beta.entryPoints=web
      - traefik.http.routers.maevsi_beta.middlewares=redirectscheme
      - traefik.http.routers.maevsi_beta.rule=Host(`${STACK_DOMAIN}`, `beta.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.http.routers.maevsi_beta_secure.entryPoints=web-secure
      - traefik.http.routers.maevsi_beta_secure.rule=Host(`${STACK_DOMAIN}`, `beta.${STACK_DOMAIN}`, `www.${STACK_DOMAIN}`)
      - traefik.http.services.maevsi_beta.loadbalancer.server.port=3000
      - traefik.http.routers.maevsi_beta_secure.tls.certresolver=default
    environment:
      CONSOLA_LEVEL: 4 # debug
      GOOGLE_ADSENSE_ID: ${GOOGLE_ADSENSE_ID}
      GOOGLE_ANALYTICS_DOMAIN: ${GOOGLE_ANALYTICS_DOMAIN}
      GOOGLE_ANALYTICS_ID: ${GOOGLE_ANALYTICS_ID}
      NUXT_PUBLIC_STACK_DOMAIN: ${STACK_DOMAIN} # Must be prefixed by "NUXT_PUBLIC_" (https://nuxt.com/docs/api/composables/use-runtime-config)
      POSTGRAPHILE_JWT_PUBLIC_KEY_FILE: /run/config/postgraphile_jwt-public-key
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      POSTGRES_ROLE_MAEVSI_TUSD_PASSWORD_FILE: /run/secrets/postgres_role_maevsi-tusd_password
    image: maevsi/maevsi:1.0.0-beta.13@sha256:66c3db14239e1960415450b0fdfe9530dbbbcef77fe4370de812c22815591b84
    secrets:
    - maevsi_sqitch-target
    - postgres_db
    - postgres_role_maevsi-postgraphile_password
    - postgres_role_maevsi-stomper_password
    - postgres_role_maevsi-tusd_password
  portainer:
    deploy:
      labels:
      - (( append ))
      - traefik.http.routers.portainer_secure.tls.certresolver=default
  postgraphile:
    deploy:
      labels:
      - (( append ))
      - traefik.http.routers.postgraphile_secure.tls.certresolver=default
  postgres_backup:
  # You cannot access the database backup directly.
    environment:
      POSTGRES_DB_FILE: /run/secrets/postgres-backup_db
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER_FILE: /run/secrets/postgres_user
    image: prodrigestivill/postgres-backup-local:15-alpine@sha256:e94deb5ea75a4246b9b4ccfd4b57f4aabbfb34e6e6188b092685a3bad6c050fe
    secrets:
    - postgres-backup_db
    - postgres_password
    - postgres_user
    volumes:
    - postgres_data:/var/lib/postgresql/data/
    - ../production/backups/postgres/:/backups/
  rabbitmq:
    deploy:
      labels:
      - (( append ))
      - traefik.http.routers.rabbitmq_secure.tls.certresolver=default
  stomper:
    deploy:
      labels:
      - (( append ))
      - traefik.http.routers.stomper_secure.tls.certresolver=default
    image: maevsi/stomper:0.28.4@sha256:6c9079afadfed7bf7b66eda35ac583f46baa39e7c5469e2d3ae07bc09a986213
    user: (( prune ))
    volumes: (( prune ))
  traefik:
    command:
    - (( prepend ))
    - --certificatesResolvers.default.acme.email=${STACK_ACME_EMAIL}
    - --certificatesResolvers.default.acme.storage=/etc/traefik/acme/acme.json
    - --certificatesResolvers.default.acme.dnsChallenge.provider=${STACK_ACME_PROVIDER}
    - --pilot.token=${TRAEFIK_PILOT_TOKEN}
    deploy:
      labels:
      - (( append ))
      - traefik.http.middlewares.auth.basicauth.users=${STACK_AUTH_BASIC}
      - traefik.http.routers.traefik_secure.middlewares=auth
      - traefik.http.routers.traefik_secure.tls.certresolver=default
    environment:
      CF_DNS_API_TOKEN_FILE: /run/secrets/traefik_cf-dns-api-token
      CF_ZONE_API_TOKEN_FILE: /run/secrets/traefik_cf-zone-api-token
    secrets:
    - traefik_cf-dns-api-token
    - traefik_cf-zone-api-token
  traefik_certs-dumper:
  # You cannot access the reverse proxy's certificate helper directly.
    command:
    - file
    - --clean=false
    - --crt-name="$STACK_DOMAIN"
    - --dest=/etc/traefik/acme/
    - --key-name="$STACK_DOMAIN"
    - --source=/etc/traefik/acme/acme.json
    - --version=v2
    - --watch
    environment:
      STACK_DOMAIN: ${STACK_DOMAIN}
    image: ldez/traefik-certs-dumper:v2.8.1@sha256:2734462fc8290feab0e34a00d5f3e4992ba74f8e3712d74efff7ae703d0e7e87
    volumes:
    - acme_data:/etc/traefik/acme/
  tusd:
    deploy:
      labels:
      - (( append ))
      - traefik.http.routers.tusd_secure.tls.certresolver=default
version: "3.7"
volumes:
  acme_data:
  # The reverse proxy's certificate data.
    {}
